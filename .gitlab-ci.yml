image: docker:latest

variables:
  REPO: kube-example
  DOCKER_REGISTRY_URL: registry.gitlab.com/ttrahan
  GIT_TAG: $CI_BUILD_TAG
  IMAGE_TAG: $CI_BUILD_REF_NAME.$CI_BUILD_ID
  DOCKER_DRIVER: overlay
  IMGOPTSSAMPLE_VERSION_MEMORY: "128"
  IMGOPTSSAMPLE_VERSION_CPUSHARES: "0.25"
  DISTRO: alpine
  STATE_STORE: s3://gitlab-state-store

services:
  - docker:dind

before_script:
  - . ./pipeline/install/installGlobal.sh # execute in same shell
  - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
  - if [[ $CI_BUILD_TAG ]]; then
    export IMAGE="$DOCKER_REGISTRY_URL/$REPO:$GIT_TAG" &&
    export TAG="$GIT_TAG";
    else
      export IMAGE="$DOCKER_REGISTRY_URL/$REPO:$IMAGE_TAG" &&
      export TAG="$IMAGE_TAG";
    fi

stages:
  - build
  - deployDev
  - release
  - deployTest

buildImage:
  stage: build
  script:
    - echo "Building "$IMAGE
    - docker build --pull -t $IMAGE .
    - docker push $IMAGE
    - echo export LAST_IMAGE_BUILT=$IMAGE > state_last_build.env
    - aws s3 cp state_last_build.env $STATE_STORE

deployToDev:
  stage: deployDev
  environment: dev
  script:
    - echo $TOOL $INSTALL_CMD
    - ./pipeline/install/installAwsCli.sh
    - ./pipeline/install/installKubeCli.sh
    - aws s3 cp $STATE_STORE/state_latest_build.env . && source state_latest_build.env && IMAGE=$LAST_IMAGE_BUILT
    - ./pipeline/deploy.sh

genRelease:
  stage: release
  environment: dev
  script:
    - docker pull $IMAGE
    - docker push $IMAGE
    - echo export LAST_TAG_BUILT=$IMAGE > state_last_tag.env
  only:
    - tags

deployToTest:
  stage: deployTest
  environment: test
  script:
    - ./pipeline/install/installAwsCli.sh
    - ./pipeline/install/installKubeCli.sh
    - aws s3 cp $STATE_STORE/state_latest_tag.env . && source state_last_tag.env && IMAGE=$LAST_TAG_BUILT
    - ./pipeline/deploy.sh
  when: manual
  only:
    - tags
